// Code generated by goa v2.0.0-wip, DO NOT EDIT.
//
// hello-goa-service client
//
// Command:
// $ goa gen github.com/scheakur/sandbox/hello-goa/design

package hellogoaservice

import (
	"context"

	goa "goa.design/goa"
)

// Client is the "hello-goa-service" service client.
type Client struct {
	HelloEndpoint    goa.Endpoint
	AddEndpoint      goa.Endpoint
	MinusEndpoint    goa.Endpoint
	MultiplyEndpoint goa.Endpoint
}

// NewClient initializes a "hello-goa-service" service client given the
// endpoints.
func NewClient(hello, add, minus, multiply goa.Endpoint) *Client {
	return &Client{
		HelloEndpoint:    hello,
		AddEndpoint:      add,
		MinusEndpoint:    minus,
		MultiplyEndpoint: multiply,
	}
}

// Hello calls the "hello" endpoint of the "hello-goa-service" service.
func (c *Client) Hello(ctx context.Context, p *HelloPayload) (res string, err error) {
	var ires interface{}
	ires, err = c.HelloEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(string), nil
}

// Add calls the "add" endpoint of the "hello-goa-service" service.
func (c *Client) Add(ctx context.Context, p *AddPayload) (res int, err error) {
	var ires interface{}
	ires, err = c.AddEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(int), nil
}

// Minus calls the "minus" endpoint of the "hello-goa-service" service.
func (c *Client) Minus(ctx context.Context, p *MinusPayload) (res int, err error) {
	var ires interface{}
	ires, err = c.MinusEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(int), nil
}

// Multiply calls the "multiply" endpoint of the "hello-goa-service" service.
func (c *Client) Multiply(ctx context.Context, p *MultiplyPayload) (res int, err error) {
	var ires interface{}
	ires, err = c.MultiplyEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(int), nil
}
