// Code generated by goa v2.0.0-wip, DO NOT EDIT.
//
// hello-goa-service client HTTP transport
//
// Command:
// $ goa gen github.com/scheakur/sandbox/hello-goa/design

package client

import (
	"context"
	"net/http"

	goa "goa.design/goa"
	goahttp "goa.design/goa/http"
)

// Client lists the hello-goa-service service endpoint HTTP clients.
type Client struct {
	// Hello Doer is the HTTP client used to make requests to the hello endpoint.
	HelloDoer goahttp.Doer

	// Add Doer is the HTTP client used to make requests to the add endpoint.
	AddDoer goahttp.Doer

	// Minus Doer is the HTTP client used to make requests to the minus endpoint.
	MinusDoer goahttp.Doer

	// Multiply Doer is the HTTP client used to make requests to the multiply
	// endpoint.
	MultiplyDoer goahttp.Doer

	// RestoreResponseBody controls whether the response bodies are reset after
	// decoding so they can be read again.
	RestoreResponseBody bool

	scheme  string
	host    string
	encoder func(*http.Request) goahttp.Encoder
	decoder func(*http.Response) goahttp.Decoder
}

// NewClient instantiates HTTP clients for all the hello-goa-service service
// servers.
func NewClient(
	scheme string,
	host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restoreBody bool,
) *Client {
	return &Client{
		HelloDoer:           doer,
		AddDoer:             doer,
		MinusDoer:           doer,
		MultiplyDoer:        doer,
		RestoreResponseBody: restoreBody,
		scheme:              scheme,
		host:                host,
		decoder:             dec,
		encoder:             enc,
	}
}

// Hello returns an endpoint that makes HTTP requests to the hello-goa-service
// service hello server.
func (c *Client) Hello() goa.Endpoint {
	var (
		decodeResponse = DecodeHelloResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildHelloRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.HelloDoer.Do(req)

		if err != nil {
			return nil, goahttp.ErrRequestError("hello-goa-service", "hello", err)
		}
		return decodeResponse(resp)
	}
}

// Add returns an endpoint that makes HTTP requests to the hello-goa-service
// service add server.
func (c *Client) Add() goa.Endpoint {
	var (
		decodeResponse = DecodeAddResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildAddRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.AddDoer.Do(req)

		if err != nil {
			return nil, goahttp.ErrRequestError("hello-goa-service", "add", err)
		}
		return decodeResponse(resp)
	}
}

// Minus returns an endpoint that makes HTTP requests to the hello-goa-service
// service minus server.
func (c *Client) Minus() goa.Endpoint {
	var (
		decodeResponse = DecodeMinusResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildMinusRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.MinusDoer.Do(req)

		if err != nil {
			return nil, goahttp.ErrRequestError("hello-goa-service", "minus", err)
		}
		return decodeResponse(resp)
	}
}

// Multiply returns an endpoint that makes HTTP requests to the
// hello-goa-service service multiply server.
func (c *Client) Multiply() goa.Endpoint {
	var (
		decodeResponse = DecodeMultiplyResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildMultiplyRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.MultiplyDoer.Do(req)

		if err != nil {
			return nil, goahttp.ErrRequestError("hello-goa-service", "multiply", err)
		}
		return decodeResponse(resp)
	}
}
