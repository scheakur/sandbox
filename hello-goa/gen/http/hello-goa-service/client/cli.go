// Code generated by goa v2.0.0-wip, DO NOT EDIT.
//
// hello-goa-service HTTP client CLI support package
//
// Command:
// $ goa gen github.com/scheakur/sandbox/hello-goa/design

package client

import (
	"fmt"
	"strconv"

	hellogoaservice "github.com/scheakur/sandbox/hello-goa/gen/hello-goa-service"
)

// BuildHelloPayload builds the payload for the hello-goa-service hello
// endpoint from CLI flags.
func BuildHelloPayload(helloGoaServiceHelloName string) (*hellogoaservice.HelloPayload, error) {
	var name string
	{
		name = helloGoaServiceHelloName
	}
	payload := &hellogoaservice.HelloPayload{
		Name: name,
	}
	return payload, nil
}

// BuildAddPayload builds the payload for the hello-goa-service add endpoint
// from CLI flags.
func BuildAddPayload(helloGoaServiceAddA string, helloGoaServiceAddB string) (*hellogoaservice.AddPayload, error) {
	var err error
	var a int
	{
		var v int64
		v, err = strconv.ParseInt(helloGoaServiceAddA, 10, 64)
		a = int(v)
		if err != nil {
			err = fmt.Errorf("invalid value for a, must be INT")
		}
	}
	var b int
	{
		var v int64
		v, err = strconv.ParseInt(helloGoaServiceAddB, 10, 64)
		b = int(v)
		if err != nil {
			err = fmt.Errorf("invalid value for b, must be INT")
		}
	}
	if err != nil {
		return nil, err
	}
	payload := &hellogoaservice.AddPayload{
		A: a,
		B: b,
	}
	return payload, nil
}

// BuildMinusPayload builds the payload for the hello-goa-service minus
// endpoint from CLI flags.
func BuildMinusPayload(helloGoaServiceMinusA string, helloGoaServiceMinusB string) (*hellogoaservice.MinusPayload, error) {
	var err error
	var a int
	{
		var v int64
		v, err = strconv.ParseInt(helloGoaServiceMinusA, 10, 64)
		a = int(v)
		if err != nil {
			err = fmt.Errorf("invalid value for a, must be INT")
		}
	}
	var b int
	{
		var v int64
		v, err = strconv.ParseInt(helloGoaServiceMinusB, 10, 64)
		b = int(v)
		if err != nil {
			err = fmt.Errorf("invalid value for b, must be INT")
		}
	}
	if err != nil {
		return nil, err
	}
	payload := &hellogoaservice.MinusPayload{
		A: a,
		B: b,
	}
	return payload, nil
}

// BuildMultiplyPayload builds the payload for the hello-goa-service multiply
// endpoint from CLI flags.
func BuildMultiplyPayload(helloGoaServiceMultiplyA string, helloGoaServiceMultiplyB string) (*hellogoaservice.MultiplyPayload, error) {
	var err error
	var a int
	{
		var v int64
		v, err = strconv.ParseInt(helloGoaServiceMultiplyA, 10, 64)
		a = int(v)
		if err != nil {
			err = fmt.Errorf("invalid value for a, must be INT")
		}
	}
	var b int
	{
		var v int64
		v, err = strconv.ParseInt(helloGoaServiceMultiplyB, 10, 64)
		b = int(v)
		if err != nil {
			err = fmt.Errorf("invalid value for b, must be INT")
		}
	}
	if err != nil {
		return nil, err
	}
	payload := &hellogoaservice.MultiplyPayload{
		A: a,
		B: b,
	}
	return payload, nil
}
