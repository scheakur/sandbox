// Code generated by goa v2.0.0-wip, DO NOT EDIT.
//
// hello-goa-api HTTP client CLI support package
//
// Command:
// $ goa gen github.com/scheakur/sandbox/hello-goa/design

package cli

import (
	"flag"
	"fmt"
	"net/http"
	"os"

	hellogoaservicec "github.com/scheakur/sandbox/hello-goa/gen/http/hello-goa-service/client"
	goa "goa.design/goa"
	goahttp "goa.design/goa/http"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//    command (subcommand1|subcommand2|...)
//
func UsageCommands() string {
	return `hello-goa-service (hello|add|minus|multiply)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` hello-goa-service hello --name "Magni ut nesciunt."` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
) (goa.Endpoint, interface{}, error) {
	var (
		helloGoaServiceFlags = flag.NewFlagSet("hello-goa-service", flag.ContinueOnError)

		helloGoaServiceHelloFlags    = flag.NewFlagSet("hello", flag.ExitOnError)
		helloGoaServiceHelloNameFlag = helloGoaServiceHelloFlags.String("name", "REQUIRED", "Name to say hello to")

		helloGoaServiceAddFlags = flag.NewFlagSet("add", flag.ExitOnError)
		helloGoaServiceAddAFlag = helloGoaServiceAddFlags.String("a", "REQUIRED", "Left operand")
		helloGoaServiceAddBFlag = helloGoaServiceAddFlags.String("b", "REQUIRED", "Right operand")

		helloGoaServiceMinusFlags = flag.NewFlagSet("minus", flag.ExitOnError)
		helloGoaServiceMinusAFlag = helloGoaServiceMinusFlags.String("a", "REQUIRED", "Left operand")
		helloGoaServiceMinusBFlag = helloGoaServiceMinusFlags.String("b", "REQUIRED", "Right operand")

		helloGoaServiceMultiplyFlags = flag.NewFlagSet("multiply", flag.ExitOnError)
		helloGoaServiceMultiplyAFlag = helloGoaServiceMultiplyFlags.String("a", "REQUIRED", "Left operand")
		helloGoaServiceMultiplyBFlag = helloGoaServiceMultiplyFlags.String("b", "REQUIRED", "Right operand")
	)
	helloGoaServiceFlags.Usage = helloGoaServiceUsage
	helloGoaServiceHelloFlags.Usage = helloGoaServiceHelloUsage
	helloGoaServiceAddFlags.Usage = helloGoaServiceAddUsage
	helloGoaServiceMinusFlags.Usage = helloGoaServiceMinusUsage
	helloGoaServiceMultiplyFlags.Usage = helloGoaServiceMultiplyUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if len(os.Args) < flag.NFlag()+3 {
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = os.Args[1+flag.NFlag()]
		switch svcn {
		case "hello-goa-service":
			svcf = helloGoaServiceFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(os.Args[2+flag.NFlag():]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = os.Args[2+flag.NFlag()+svcf.NFlag()]
		switch svcn {
		case "hello-goa-service":
			switch epn {
			case "hello":
				epf = helloGoaServiceHelloFlags

			case "add":
				epf = helloGoaServiceAddFlags

			case "minus":
				epf = helloGoaServiceMinusFlags

			case "multiply":
				epf = helloGoaServiceMultiplyFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if len(os.Args) > 2+flag.NFlag()+svcf.NFlag() {
		if err := epf.Parse(os.Args[3+flag.NFlag()+svcf.NFlag():]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     interface{}
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "hello-goa-service":
			c := hellogoaservicec.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "hello":
				endpoint = c.Hello()
				data, err = hellogoaservicec.BuildHelloPayload(*helloGoaServiceHelloNameFlag)
			case "add":
				endpoint = c.Add()
				data, err = hellogoaservicec.BuildAddPayload(*helloGoaServiceAddAFlag, *helloGoaServiceAddBFlag)
			case "minus":
				endpoint = c.Minus()
				data, err = hellogoaservicec.BuildMinusPayload(*helloGoaServiceMinusAFlag, *helloGoaServiceMinusBFlag)
			case "multiply":
				endpoint = c.Multiply()
				data, err = hellogoaservicec.BuildMultiplyPayload(*helloGoaServiceMultiplyAFlag, *helloGoaServiceMultiplyBFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// hello-goa-serviceUsage displays the usage of the hello-goa-service command
// and its subcommands.
func helloGoaServiceUsage() {
	fmt.Fprintf(os.Stderr, `The calc service performs operations on numbers
Usage:
    %s [globalflags] hello-goa-service COMMAND [flags]

COMMAND:
    hello: Hello implements hello.
    add: Add implements add.
    minus: Minus implements minus.
    multiply: Multiply implements multiply.

Additional help:
    %s hello-goa-service COMMAND --help
`, os.Args[0], os.Args[0])
}
func helloGoaServiceHelloUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] hello-goa-service hello -name STRING

Hello implements hello.
    -name STRING: Name to say hello to

Example:
    `+os.Args[0]+` hello-goa-service hello --name "Magni ut nesciunt."
`, os.Args[0])
}

func helloGoaServiceAddUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] hello-goa-service add -a INT -b INT

Add implements add.
    -a INT: Left operand
    -b INT: Right operand

Example:
    `+os.Args[0]+` hello-goa-service add --a 699433153361118317 --b 1164318969007256490
`, os.Args[0])
}

func helloGoaServiceMinusUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] hello-goa-service minus -a INT -b INT

Minus implements minus.
    -a INT: Left operand
    -b INT: Right operand

Example:
    `+os.Args[0]+` hello-goa-service minus --a 8468137552482952738 --b 563205529024813993
`, os.Args[0])
}

func helloGoaServiceMultiplyUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] hello-goa-service multiply -a INT -b INT

Multiply implements multiply.
    -a INT: Left operand
    -b INT: Right operand

Example:
    `+os.Args[0]+` hello-goa-service multiply --a 3689426099454386548 --b 8109691204785590140
`, os.Args[0])
}
